package jet.opengl.renderer.Unreal4.views;

import org.lwjgl.util.vector.Matrix4f;
import org.lwjgl.util.vector.Vector2f;
import org.lwjgl.util.vector.Vector2i;
import org.lwjgl.util.vector.Vector3f;
import org.lwjgl.util.vector.Vector4f;

import jet.opengl.renderer.Unreal4.UE4Engine;

public class FInstancedViewUniformShaderParameters {

    protected static final int TVC_MAX = 2;

    public final Matrix4f TranslatedWorldToClip = new Matrix4f();
    public final Matrix4f WorldToClip = new Matrix4f();
    public final Matrix4f ClipToWorld = new Matrix4f();
    public final Matrix4f TranslatedWorldToView = new Matrix4f();
    public final Matrix4f ViewToTranslatedWorld = new Matrix4f();
    public final Matrix4f TranslatedWorldToCameraView = new Matrix4f();
    public final Matrix4f CameraViewToTranslatedWorld = new Matrix4f();
    public final Matrix4f ViewToClip = new Matrix4f();
    public final Matrix4f ViewToClipNoAA = new Matrix4f();
    public final Matrix4f ClipToView = new Matrix4f();
    public final Matrix4f ClipToTranslatedWorld = new Matrix4f();
    public final Matrix4f SVPositionToTranslatedWorld = new Matrix4f();
    public final Matrix4f ScreenToWorld = new Matrix4f();
    public final Matrix4f ScreenToTranslatedWorld = new Matrix4f();
    public final Vector3f ViewForward = new Vector3f();
    public final Vector3f ViewUp = new Vector3f();
    public final Vector3f ViewRight = new Vector3f();
    public final Vector3f HMDViewNoRollUp = new Vector3f();
    public final Vector3f HMDViewNoRollRight = new Vector3f();
    public final Vector4f InvDeviceZToWorldZTransform = new Vector4f();
    public final Vector4f ScreenPositionScaleBias = new Vector4f();
    public final Vector3f WorldCameraOrigin = new Vector3f();
    public final Vector3f TranslatedWorldCameraOrigin = new Vector3f();
    public final Vector3f WorldViewOrigin = new Vector3f();
    public final Vector3f PreViewTranslation = new Vector3f();
    public final Matrix4f PrevProjection = new Matrix4f();
    public final Matrix4f PrevViewProj = new Matrix4f();
    public final Matrix4f PrevViewRotationProj = new Matrix4f();
    public final Matrix4f PrevViewToClip = new Matrix4f();
    public final Matrix4f PrevClipToView = new Matrix4f();
    public final Matrix4f PrevTranslatedWorldToClip = new Matrix4f();
    public final Matrix4f PrevTranslatedWorldToView = new Matrix4f();
    public final Matrix4f PrevViewToTranslatedWorld = new Matrix4f();
    public final Matrix4f PrevTranslatedWorldToCameraView = new Matrix4f();
    public final Matrix4f PrevCameraViewToTranslatedWorld = new Matrix4f();
    public final Vector3f PrevWorldCameraOrigin = new Vector3f();
    public final Vector3f PrevWorldViewOrigin = new Vector3f();
    public final Vector3f PrevPreViewTranslation = new Vector3f();
    public final Matrix4f PrevInvViewProj = new Matrix4f();
    public final Matrix4f PrevScreenToTranslatedWorld = new Matrix4f();
    public final Matrix4f ClipToPrevClip = new Matrix4f();
    public final Vector4f TemporalAAJitter = new Vector4f();
    public final Vector4f GlobalClippingPlane = new Vector4f();
    public final Vector2f FieldOfViewWideAngles = new Vector2f();
    public final Vector2f PrevFieldOfViewWideAngles = new Vector2f();
    public final Vector4f ViewRectMin = new Vector4f();
    public final Vector4f ViewSizeAndInvSize = new Vector4f();
    public final Vector4f BufferSizeAndInvSize = new Vector4f();
    public final Vector4f BufferBilinearUVMinMax = new Vector4f();
    public int NumSceneColorMSAASamples;
    public float PreExposure;
    public float OneOverPreExposure;
    public final Vector4f DiffuseOverrideParameter = new Vector4f();
    public final Vector4f SpecularOverrideParameter = new Vector4f();
    public final Vector4f NormalOverrideParameter = new Vector4f();
    public final Vector2f RoughnessOverrideParameter = new Vector2f();
    public float PrevFrameGameTime;
    public float PrevFrameRealTime;
    public float OutOfBoundsMask;
    public final Vector3f WorldCameraMovementSinceLastFrame = new Vector3f();
    public float CullingSign;
    public float NearPlane;
    public float AdaptiveTessellationFactor;
    public float GameTime;
    public float RealTime;
    public float DeltaTime;
    public float MaterialTextureMipBias;
    public float MaterialTextureDerivativeMultiply;
    public int Random;
    public int FrameNumber;
    public int StateFrameIndexMod8;
    public int StateFrameIndex;
    public float CameraCut;
    public float UnlitViewmodeMask;
    public final Vector4f DirectionalLightColor = new Vector4f();
    public final Vector3f DirectionalLightDirection = new Vector3f();
    public final Vector4f[] TranslucencyLightingVolumeMin = new Vector4f[TVC_MAX];
    public final Vector4f[] TranslucencyLightingVolumeInvSize = new Vector4f[TVC_MAX];
    public final Vector4f TemporalAAParams = new Vector4f();
    public final Vector4f CircleDOFParams = new Vector4f();
    public float DepthOfFieldSensorWidth;
    public float DepthOfFieldFocalDistance;
    public float DepthOfFieldScale;
    public float DepthOfFieldFocalLength;
    public float DepthOfFieldFocalRegion;
    public float DepthOfFieldNearTransitionRegion;
    public float DepthOfFieldFarTransitionRegion;
    public float MotionBlurNormalizedToPixel;
    public float bSubsurfacePostprocessEnabled;
    public float GeneralPurposeTweak;
    public float DemosaicVposOffset;
    public final Vector3f IndirectLightingColorScale = new Vector3f();
    public float HDR32bppEncodingMode;
    public float AtmosphericFogSunPower;
    public float AtmosphericFogPower;
    public float AtmosphericFogDensityScale;
    public float AtmosphericFogDensityOffset;
    public float AtmosphericFogGroundOffset;
    public float AtmosphericFogDistanceScale;
    public float AtmosphericFogAltitudeScale;
    public float AtmosphericFogHeightScaleRayleigh;
    public float AtmosphericFogStartDistance;
    public float AtmosphericFogDistanceOffset;
    public float AtmosphericFogSunDiscScale;
    public final Vector4f[] AtmosphereLightDirection = new Vector4f[UE4Engine.NUM_ATMOSPHERE_LIGHTS];
    public final Vector4f[] AtmosphereLightColor = new Vector4f[UE4Engine.NUM_ATMOSPHERE_LIGHTS];
    public final Vector4f[] AtmosphereLightColorGlobalPostTransmittance = new Vector4f[UE4Engine.NUM_ATMOSPHERE_LIGHTS];
    public final Vector4f[] AtmosphereLightDiscLuminance = new Vector4f[UE4Engine.NUM_ATMOSPHERE_LIGHTS];
    public final Vector4f[] AtmosphereLightDiscCosHalfApexAngle = new Vector4f[UE4Engine.NUM_ATMOSPHERE_LIGHTS];
    public final Vector4f SkyViewLutSizeAndInvSize = new Vector4f();
    public final Vector3f SkyWorldCameraOrigin = new Vector3f();
    public final Vector4f SkyAtmosphereSkyLuminanceFactor = new Vector4f();
    public float SkyAtmosphereBottomRadius;
    public float SkyAtmosphereTopRadius;
    public float SkyAtmosphereAerialPerspectiveStartDepth;
    public float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
    public float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
    public float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLength;
    public float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthInv;
    public float SkyAtmosphereApplyCameraAerialPerspectiveVolume;
    public int AtmosphericFogRenderMask;
    public int AtmosphericFogInscatterAltitudeSampleNum;
    public final Vector3f NormalCurvatureToRoughnessScaleBias = new Vector3f();
    public float RenderingReflectionCaptureMask;
    public final Vector4f AmbientCubemapTint = new Vector4f();
    public float AmbientCubemapIntensity;
    public float SkyLightParameters;
    public final Vector4f SkyLightColor = new Vector4f();
    public final Vector4f[] SkyIrradianceEnvironmentMap = new Vector4f[7];
    public float MobilePreviewMode;
    public float HMDEyePaddingOffset;
    public float ReflectionCubemapMaxMip;
    public float ShowDecalsMask;
    public int DistanceFieldAOSpecularOcclusionMode;
    public float IndirectCapsuleSelfShadowingIntensity;
    public final Vector3f ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight = new Vector3f();
    public int StereoPassIndex;
    public final Vector4f[] GlobalVolumeCenterAndExtent = new Vector4f[UE4Engine.GMaxGlobalDistanceFieldClipmaps];
    public final Vector4f[] GlobalVolumeWorldToUVAddAndMul = new Vector4f[UE4Engine.GMaxGlobalDistanceFieldClipmaps];
    public float GlobalVolumeDimension;
    public float GlobalVolumeTexelSize;
    public float MaxGlobalDistance;
    public final Vector2i CursorPosition = new Vector2i();
    public float bCheckerboardSubsurfaceProfileRendering;
    public final Vector3f VolumetricFogInvGridSize = new Vector3f();
    public final Vector3f VolumetricFogGridZParams = new Vector3f();
    public final Vector2f VolumetricFogSVPosToVolumeUV = new Vector2f();
    public float VolumetricFogMaxDistance;
    public final Vector3f VolumetricLightmapWorldToUVScale = new Vector3f();
    public final Vector3f VolumetricLightmapWorldToUVAdd = new Vector3f();
    public final Vector3f VolumetricLightmapIndirectionTextureSize = new Vector3f();
    public float VolumetricLightmapBrickSize;
    public final Vector3f VolumetricLightmapBrickTexelSize = new Vector3f();
    public float StereoIPD;
    public float IndirectLightingCacheShowFlag;
    public float EyeToPixelSpreadAngle;
    public final Matrix4f WorldToVirtualTexture = new Matrix4f();
    public final Vector4f VirtualTextureParams = new Vector4f();
    public final Vector4f[] XRPassthroughCameraUVs = new Vector4f[2];

}
