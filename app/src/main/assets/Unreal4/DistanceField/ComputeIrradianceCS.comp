// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	GlobalDistanceField.usf
=============================================================================*/

//#include "Common.ush"
//#include "DeferredShadingCommon.ush"
#include "DistanceFieldLightingShared.glsl"
#include "DistanceFieldAOShared.glsl"
#include "GlobalDistanceFieldShared.glsl"
//#include "HeightfieldLightingShared.ush"

uniform float VPLGatherRadius;

//Buffer<float4> StepBentNormalBuffer;
uniform samplerBuffer StepBentNormalBuffer;

float4 LoadVPLPositionAndRadius(uint VPLIndex, float4x4 InstanceToWorld)
{
#if IRRADIANCE_FROM_SURFELS
	float4 PositionAndRadius = LoadSurfelPositionAndRadius(VPLIndex);
	PositionAndRadius.xyz = mul(float4(PositionAndRadius.xyz, 1), InstanceToWorld).xyz;
	return PositionAndRadius;
#else
	return VPLData[VPLIndex * VPL_DATA_STRIDE + 0];
#endif
}

float3 LoadVPLNormal(uint VPLIndex, float4x4 InstanceToWorld)
{
#if IRRADIANCE_FROM_SURFELS
	float3 SurfelNormal = LoadSurfelNormal(VPLIndex);
	SurfelNormal = mul(SurfelNormal, (float3x3)InstanceToWorld);
	return SurfelNormal;
#else
	return VPLData[VPLIndex * VPL_DATA_STRIDE + 1].xyz;
#endif
}

//Buffer<float4> VPLFlux;
uniform samplerBuffer VPLFlux;

float3 LoadVPLFlux(uint VPLIndex)
{
#if IRRADIANCE_FROM_SURFELS
	return VPLFlux[VPLIndex].xyz;
#else
	return VPLData[VPLIndex * VPL_DATA_STRIDE + 2].xyz;
#endif
}

float3 ComputeVirtualPointLighting(uint VPLIndex, uint InstancedVPLIndex, uint RelativeRecordIndex, float3 WorldPosition, float3 WorldNormal, float4x4 InstanceToWorld)
{
	float3 Irradiance = 0;

	float VisibilityStepSize = NUM_VISIBILITY_STEPS / AOObjectMaxDistance;
	float MaxGatherDistanceSq = VPLGatherRadius * VPLGatherRadius;
	float4 VPLPositionAndRadius = LoadVPLPositionAndRadius(VPLIndex, InstanceToWorld);

	float3 VPLToGatherPoint = WorldPosition - VPLPositionAndRadius.xyz;
	float DistanceSq = dot(VPLToGatherPoint, VPLToGatherPoint);
	float DirectionDot = dot(-VPLToGatherPoint, WorldNormal);

	// Hack
	//VPLPositionAndRadius.w = 10;

#define VISUALIZE_VPL_PLACEMENT 0
#if VISUALIZE_VPL_PLACEMENT
	//Irradiance += float3(.4f, .2f, .2f) * .1f * (DistanceSq < VPLPositionAndRadius.w * VPLPositionAndRadius.w);

	//float3 DebugValue = LoadVPLFlux(VPLIndex) / 10000;
	float3 DebugValue = LoadSurfelDiffuseColor(VPLIndex);
	Irradiance += DebugValue * .1f * (DistanceSq < VPLPositionAndRadius.w * VPLPositionAndRadius.w);
	//Irradiance += .00001f;
#endif

#define COMPUTE_VPL_LIGHTING 1
#define VISUALIZE_VPL_SCENE 0

#if COMPUTE_VPL_LIGHTING
	BRANCH
	if (DistanceSq < MaxGatherDistanceSq && DirectionDot > 0)
	{
		float3 VPLNormal = LoadVPLNormal(VPLIndex, InstanceToWorld);
		float VPLNormalDot = dot(VPLNormal, VPLToGatherPoint);

		BRANCH
		if (VPLNormalDot > 0)
		{
			float3 VPLFlux = LoadVPLFlux(InstancedVPLIndex);

			BRANCH
			if (any(VPLFlux > .01f))
			{
				float Distance = sqrt(DistanceSq);
				float3 VPLDirection = -VPLToGatherPoint / Distance;

				#define USE_INVERSE_SQUARED_DISK_APPROX 1

				#if USE_INVERSE_SQUARED_DISK_APPROX
					float DiskRadiusSq = VPLPositionAndRadius.w * VPLPositionAndRadius.w;
					float DistanceAttenuation = DiskRadiusSq / (DistanceSq + DiskRadiusSq);

					float MinDistanceAttenuation = DiskRadiusSq / (VPLGatherRadius * VPLGatherRadius + DiskRadiusSq);
					DistanceAttenuation = max(DistanceAttenuation - MinDistanceAttenuation, 0);

					#define CONSERVE_ENERGY 0
					#if CONSERVE_ENERGY
						float Integral = VPLPositionAndRadius.w * atan(VPLGatherRadius / VPLPositionAndRadius.w);
						float EnergyConservationScale = Integral / (Integral - MinDistanceAttenuation * VPLGatherRadius);
						DistanceAttenuation *= EnergyConservationScale;
					#endif
				#else
					float DistanceAttenuation = RadialAttenuation(VPLToGatherPoint / VPLGatherRadius, 8);
					DistanceAttenuation *= .0001f;
				#endif

				float CosTheta = DirectionDot / Distance;
				float SinTheta = sqrt(1 - CosTheta * CosTheta);

				#define IRRADIANCE_FROM_AO_CONES 1
				#if IRRADIANCE_FROM_AO_CONES

					float ShadowDepthBias = 0;
					float ShadowingDistance = Distance + ShadowDepthBias;
					float NormalizedDistance = saturate(ShadowingDistance / AOObjectMaxDistance);
					uint LowerStepIndex = (uint)min(NormalizedDistance * NUM_VISIBILITY_STEPS, NUM_VISIBILITY_STEPS - 1);
					float LerpAlpha = ShadowingDistance - LowerStepIndex * VisibilityStepSize;

					float3 InterpolatedBentNormal = lerp(
						StepBentNormalBuffer[RelativeRecordIndex * NUM_VISIBILITY_STEPS + LowerStepIndex].xyz,
						StepBentNormalBuffer[RelativeRecordIndex * NUM_VISIBILITY_STEPS + LowerStepIndex + 1].xyz,
						saturate(LerpAlpha));

					float Shadow = GetVPLOcclusion(InterpolatedBentNormal, VPLDirection, .5f, 1);

				#else

					float StartOffset = 1;
					float EndOffset = 10;
					float RayLength = max(Distance - StartOffset - EndOffset, 0);
					float ConeEndDistance = max(RayLength - SinTheta * VPLPositionAndRadius.w, 0);
					float RadiusAtConeEnd = CosTheta * VPLPositionAndRadius.w;
					// Clamp the cone angle so that it doesn't intersect the gather point surface
					float TanConeAngle = min(RadiusAtConeEnd / ConeEndDistance, SinTheta / CosTheta);
					float Shadow = RayTraceThroughGlobalObjects(WorldPosition + StartOffset * VPLDirection, VPLDirection, RayLength, TanConeAngle, ConeEndDistance);

					if (ConeEndDistance == 0)
					{
						//Shadow = 10;
					}

				#endif

				float VPLCosineLobe = saturate(VPLNormalDot / Distance);

				Irradiance += (saturate(CosTheta) * VPLCosineLobe * DistanceAttenuation * Shadow) * VPLFlux;
			}
		}
	}
#elif VISUALIZE_VPL_SCENE

	float DistanceWeight = (1 - saturate(DistanceSq / (VPLPositionAndRadius.w * VPLPositionAndRadius.w)));
	float3 VPLNormal = LoadVPLNormal(VPLIndex, InstanceToWorld);
	float DistanceBehindVPL = dot((WorldPosition - VPLPositionAndRadius.xyz), -VPLNormal);
	float DistanceBehindMask = 1 - saturate(DistanceBehindVPL / (.5f * VPLPositionAndRadius.w));

	float EffectiveDiskRadius = VPLPositionAndRadius.w * 1;
	float DistanceAttenuation = VPLPositionAndRadius.w * VPLPositionAndRadius.w / (DistanceSq + EffectiveDiskRadius * EffectiveDiskRadius);
	float3 VPLFlux = LoadVPLFlux(InstancedVPLIndex);
	float NormalMask = saturate(dot(VPLNormal, WorldNormal));

	Irradiance += DistanceWeight * VPLFlux * DistanceAttenuation * DistanceBehindMask * NormalMask;
#endif

	return Irradiance;
}

//Buffer<float4> TileConeDepthRanges;
uniform samplerBuffer TileConeDepthRanges;

float3 GatherIrradianceFromVPLs(float3 WorldPosition, float3 WorldNormal, uint RelativeRecordIndex, uint2 TileCoordinate, uint ThreadIndex)
{
	float3 Irradiance = 0;

#if IRRADIANCE_FROM_SURFELS
	/*
	uint4 TileHead = GetTileHead(TileCoordinate);
	uint TileIndex = TileCoordinate.y * TileListGroupSize.x + TileCoordinate.x;
	float4 ConeAxisDepthRanges = TileConeDepthRanges.Load(TileIndex);
	float SceneDepth = mul(float4(WorldPosition, 1), View.WorldToClip).w;
	uint ListIndex = SceneDepth < ConeAxisDepthRanges.y ? 0 : 1;
	uint NumObjectsAffectingTile = SceneDepth < ConeAxisDepthRanges.y ? TileHead.y : TileHead.z;

	LOOP
	for (uint ListObjectIndex = 0; ListObjectIndex < NumObjectsAffectingTile; ListObjectIndex++)
	{
		uint ArrayIndex = ListObjectIndex;
		uint ObjectIndex = TileArrayData.Load((ArrayIndex * TileListGroupSize.x * TileListGroupSize.y + TileHead.x) * NUM_CULLED_OBJECT_LISTS + ListIndex);
		float4 ObjectPositionAndRadius = LoadObjectPositionAndRadius(ObjectIndex);
		float ObjectDistance = length(ObjectPositionAndRadius.xyz - WorldPosition);
		float BoundingRadius = ObjectPositionAndRadius.w + VPLGatherRadius;

		BRANCH
		if (ObjectDistance < BoundingRadius)
		{
			//float ObjectDistance = length(ObjectPositionAndRadius.xyz - WorldPosition) - ObjectPositionAndRadius.w;
			//Irradiance += .0001f * (ObjectDistance > VPLGatherRadius / 2);

			uint4 SurfelCoordinate = LoadObjectSurfelCoordinate(ObjectIndex);
			uint ViewBasedLOD = GetViewBasedSurfelLOD(ObjectPositionAndRadius.xyz);
			//uint DistanceBasedLOD = ObjectDistance - ObjectPositionAndRadius.w > .5f * VPLGatherRadius ? 1 : 0;
			//uint FinalLOD = max(ViewBasedLOD, DistanceBasedLOD);
			uint2 InstancedSurfelOffsetAndNum = GetSurfelOffsetAndNum(SurfelCoordinate, ViewBasedLOD, true);
			uint2 SurfelOffsetAndNum = GetSurfelOffsetAndNum(SurfelCoordinate, ViewBasedLOD, false);

			float4x4 ObjectInstanceToWorld = LoadObjectLocalToWorld(ObjectIndex);

			LOOP
			for (uint VPLIndex = ThreadIndex; VPLIndex < SurfelOffsetAndNum.y; VPLIndex += FINAL_GATHER_THREADGROUP_SIZE)
			{
				Irradiance += ComputeVirtualPointLighting(VPLIndex + SurfelOffsetAndNum.x, VPLIndex + InstancedSurfelOffsetAndNum.x, RelativeRecordIndex, WorldPosition, WorldNormal, ObjectInstanceToWorld);
			}
		}
	}*/

#else

	uint NumVPLs = VPLParameterBuffer[1];
	float4x4 Dummy = 0;

	LOOP
	for (uint VPLIndex = ThreadIndex; VPLIndex < NumVPLs; VPLIndex += FINAL_GATHER_THREADGROUP_SIZE)
	{
		Irradiance += ComputeVirtualPointLighting(VPLIndex, VPLIndex, RelativeRecordIndex, WorldPosition, WorldNormal, Dummy);
	}

#endif

	//Irradiance = NumClusterVPLs / (float)MAX_VPLS_PER_TILE;

	return Irradiance;
}

groupshared float3 SharedThreadIrradiance[FINAL_GATHER_THREADGROUP_SIZE];

/*[numthreads(FINAL_GATHER_THREADGROUP_SIZE, 1, 1)]
void ComputeIrradianceCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
    uint3 GroupThreadId : SV_GroupThreadID)*/
COMP_SIZE(FINAL_GATHER_THREADGROUP_SIZE, 1, 1);
void main()
{
    uint3 GroupId = gl_WorkGroupID;
    uint3 DispatchThreadId = gl_GlobalInvocationID;
    uint3 GroupThreadId = gl_LocalInvocationID;

	uint StartIndex = SavedStartIndex[0];
	uint NumRecords = ScatterDrawParameters[1];

	uint RecordIndex = StartIndex + GroupId.x;
	uint RelativeRecordIndex = GroupId.x;
	uint ThreadIndex = GroupThreadId.x;

	float3 Irradiance = 0;

	if (RecordIndex < NumRecords)
	{
		float3 RecordWorldNormal = IrradianceCacheNormal[RecordIndex].xyz;
		float3 RecordWorldPosition = IrradianceCachePositionRadius[RecordIndex].xyz;
		uint2 TileCoordinate = IrradianceCacheTileCoordinate[RecordIndex];
		Irradiance = GatherIrradianceFromVPLs(RecordWorldPosition, RecordWorldNormal, RelativeRecordIndex, TileCoordinate, ThreadIndex);
	}

	SharedThreadIrradiance[ThreadIndex] = Irradiance;

	GroupMemoryBarrierWithGroupSync();

	if (ThreadIndex == 0)
	{
		float3 Irradiance = 0;

		for (uint i = 0; i < FINAL_GATHER_THREADGROUP_SIZE; i++)
		{
			Irradiance += SharedThreadIrradiance[i];
		}

		RWSurfelIrradiance[RelativeRecordIndex] = float4(Irradiance, 0);
	}
}