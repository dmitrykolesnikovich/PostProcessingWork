// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	GlobalDistanceField.usf
=============================================================================*/

//#include "Common.ush"
//#include "DeferredShadingCommon.ush"
#include "DistanceFieldLightingShared.glsl"
#include "DistanceFieldAOShared.glsl"
#include "GlobalDistanceFieldShared.glsl"
//#include "HeightfieldLightingShared.ush"

#ifndef COMPOSITE_HEIGHTFIELDS_THREADGROUP_SIZE
#define COMPOSITE_HEIGHTFIELDS_THREADGROUP_SIZE 1
#endif


/*[numthreads(COMPOSITE_HEIGHTFIELDS_THREADGROUP_SIZE, COMPOSITE_HEIGHTFIELDS_THREADGROUP_SIZE, 1)]
void CompositeHeightfieldsIntoGlobalDistanceFieldCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID)*/
layout(local_size_x = COMPOSITE_HEIGHTFIELDS_THREADGROUP_SIZE, local_size_y = COMPOSITE_HEIGHTFIELDS_THREADGROUP_SIZE, local_size_z = 1) in;
void main()
{
    uint3 GroupId = gl_WorkGroupID;
    uint3 DispatchThreadId = gl_GlobalInvocationID;
    uint3 GroupThreadId = gl_LocalInvocationID;

	// We only dispatch one depth layer, so the z value is incorrect
	float3 LookupWorldPosition = UpdateRegionVolumeMin + float3(DispatchThreadId.xy, 0.0f) * UpdateRegionVolumeStep;

	uint ValidHeightfieldIndex = 0;

//	LOOP
	for (uint HeightfieldIndex = 0; HeightfieldIndex < NumHeightfields; HeightfieldIndex++)
	{
		float3 LocalPosition = mul(float4(LookupWorldPosition, 1), GetWorldToLocal(HeightfieldIndex)).xyz;
		float4 MinMaxHeightfieldUV;
		float2 HeightfieldUV = GetHeightfieldUV(HeightfieldIndex, LocalPosition.xy, MinMaxHeightfieldUV);

		if (all(HeightfieldUV > MinMaxHeightfieldUV.xy) && all(HeightfieldUV < MinMaxHeightfieldUV.zw))
		{
			ValidHeightfieldIndex = HeightfieldIndex;
			break;
		}
	}


	float3 LocalPosition = mul(float4(LookupWorldPosition, 1), GetWorldToLocal(ValidHeightfieldIndex)).xyz;
	float4 MinMaxHeightfieldUV;
	float2 HeightfieldUV = GetHeightfieldUV(ValidHeightfieldIndex, LocalPosition.xy, MinMaxHeightfieldUV);

	if (all(HeightfieldUV > MinMaxHeightfieldUV.xy) && all(HeightfieldUV < MinMaxHeightfieldUV.zw))
	{
		float3 WorldHeightfieldNormal;
		float3 WorldHeightfieldShadingPosition = GetHeightfieldWorldPositionAndNormal(ValidHeightfieldIndex, LocalPosition.xy, HeightfieldUV, WorldHeightfieldNormal);

		if (all(DispatchThreadId.xy < UpdateRegionSize.xy))
		{
			// Compute distance for all Z values of the update region
			LOOP
			for (uint ZIndex = 0; ZIndex < UpdateRegionSize.z; ZIndex++)
			{
				float3 WorldPosition;
				WorldPosition.xy = LookupWorldPosition.xy;
				WorldPosition.z = UpdateRegionVolumeMin.z + ZIndex * UpdateRegionVolumeStep;

				// Project the vertical height vector onto the normal of the heightfield directly below the point we are computing the distance field for, use the perpendicular distance
				float DistanceToHeightfieldPlane = dot(WorldHeightfieldNormal, WorldPosition - WorldHeightfieldShadingPosition);
				float MinDistance = clamp(DistanceToHeightfieldPlane, -AOGlobalMaxSphereQueryRadius, AOGlobalMaxSphereQueryRadius);

				float3 GlobalUV = ComputeGlobalUV(WorldPosition, ClipmapIndex);
				uint3 WriteCoordinate = (uint3)(frac(GlobalUV) * GlobalVolumeDimension);
				RWGlobalDistanceFieldTexture[WriteCoordinate] = min(MinDistance, RWGlobalDistanceFieldTexture[WriteCoordinate]);
			}
		}
	}
}