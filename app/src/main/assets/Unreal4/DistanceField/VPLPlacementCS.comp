// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	DistanceFieldGlobalIllumination.usf
=============================================================================*/

//#include "Common.ush"
//#include "DeferredShadingCommon.ush"
#include "DistanceFieldLightingShared.glsl"
#include "DistanceFieldAOShared.glsl"
//#include "DynamicLightingCommon.glsl"
#include "DistanceFieldShadowingShared.glsl"

#define USE_SHADOW_CULLING_FOR_VPL_PLACEMENT 1

void RayTraceThroughLightTileCulledObjectsFirstHit(
	float3 RayStartPosition,
	float3 RayDirection,
	float RayLength,
	uint NumIntersectingObjects,
	uint CulledDataStart,
	out float OutMinRayTime,
	out float OutMinRayVisibility,
	out uint OutObjectIndex)
{
	float MinSphereRadius = .1f;
	float MaxSphereRadius = .1f;

	float3 WorldRayStart = RayStartPosition;
	float3 WorldRayEnd = RayStartPosition + RayDirection * RayLength;
	float MaxRayTime = RayLength;
	float TanLightAngle = 0;

	float MinRayTime = MaxRayTime;
	float MinVisibility = 1;

//	LOOP
	for (uint ListObjectIndex = 0; ListObjectIndex < NumIntersectingObjects; ListObjectIndex++)
	{
		#if USE_SHADOW_CULLING_FOR_VPL_PLACEMENT
			uint ObjectIndex = ShadowTileArrayData.Load(ListObjectIndex * ShadowTileListGroupSize.x * ShadowTileListGroupSize.y + CulledDataStart);
		#else
			uint ObjectIndex = ListObjectIndex;
		#endif

		float3 LocalPositionExtent = LoadObjectLocalPositionExtent(ObjectIndex);
		float4x4 WorldToVolume = LoadObjectWorldToVolume(ObjectIndex);
		float4 UVScaleAndVolumeScale = LoadObjectUVScale(ObjectIndex);
		float3 UVAdd = LoadObjectUVAddAndSelfShadowBias(ObjectIndex).xyz;
		float2 DistanceFieldMAD = LoadObjectDistanceFieldMAD(ObjectIndex);

		float3 VolumeRayStart = mul(float4(WorldRayStart, 1), WorldToVolume).xyz;
		float3 VolumeRayEnd = mul(float4(WorldRayEnd, 1), WorldToVolume).xyz;
		float3 VolumeRayDirection = VolumeRayEnd - VolumeRayStart;
		float VolumeRayLength = length(VolumeRayDirection);
		VolumeRayDirection /= VolumeRayLength;
		float VolumeMinSphereRadius = MinSphereRadius / UVScaleAndVolumeScale.w;
		float VolumeMaxSphereRadius = MaxSphereRadius / UVScaleAndVolumeScale.w;

		float4 SphereCenterAndRadius = LoadObjectPositionAndRadius(ObjectIndex);
		float ObjectCenterDistanceAlongRay = max(dot(SphereCenterAndRadius.xyz - WorldRayStart, WorldRayEnd - WorldRayStart), 0);
		// Expand the intersection box by the radius of the cone at the distance of the object along the cone
		float LocalConeRadiusAtObject = min(TanLightAngle * ObjectCenterDistanceAlongRay / UVScaleAndVolumeScale.w, VolumeMaxSphereRadius);

		float2 IntersectionTimes = LineBoxIntersect(VolumeRayStart, VolumeRayEnd, -LocalPositionExtent - LocalConeRadiusAtObject, LocalPositionExtent + LocalConeRadiusAtObject);

//		BRANCH
		if (IntersectionTimes.x < IntersectionTimes.y && IntersectionTimes.x < 1)
		{
			float SampleRayTime = IntersectionTimes.x * VolumeRayLength;
			uint MaxSteps = 64;
			float MinStepSize = 1.0f / (4 * MaxSteps);

			float MinDistance = 1000000;
			float3 IntersectionPosition = float3(0, 0, 0);

			uint StepIndex = 0;

//			LOOP
			for (; StepIndex < MaxSteps; StepIndex++)
			{
				float3 SampleVolumePosition = VolumeRayStart + VolumeRayDirection * SampleRayTime;
				float3 ClampedSamplePosition = clamp(SampleVolumePosition, -LocalPositionExtent, LocalPositionExtent);
				float DistanceToClamped = length(ClampedSamplePosition - SampleVolumePosition);
				float3 VolumeUV = DistanceFieldVolumePositionToUV(ClampedSamplePosition, UVScaleAndVolumeScale.xyz, UVAdd);
				float DistanceField = SampleMeshDistanceField(VolumeUV, DistanceFieldMAD).x + DistanceToClamped;

				MinDistance = min(MinDistance, DistanceField);
				float SphereRadius = clamp(TanLightAngle * SampleRayTime, VolumeMinSphereRadius, VolumeMaxSphereRadius);

				MinVisibility = min(MinVisibility, saturate(DistanceField / SphereRadius));
				IntersectionPosition = SampleVolumePosition;

				float StepDistance = max(DistanceField, MinStepSize);

				// Terminate the trace if we reached a negative area or went past the end of the ray
				if (DistanceField <= 0
					|| SampleRayTime + StepDistance > IntersectionTimes.y * VolumeRayLength)
				{
					// Step back to the intersection point if we went inside
					SampleRayTime += min(DistanceField, 0);
					break;
				}

				SampleRayTime += StepDistance;
			}

			if (MinDistance < 0 || StepIndex == MaxSteps)
			{
				MinVisibility = 0;
				//MinRayTime = min(MinRayTime, SampleRayTime * UVScaleAndVolumeScale.w);

				if (SampleRayTime * UVScaleAndVolumeScale.w < MinRayTime)
				{
					MinRayTime = UVScaleAndVolumeScale.w * SampleRayTime;
					OutObjectIndex = ObjectIndex;
				}
			}
		}
	}

	OutMinRayVisibility = MinVisibility;
	OutMinRayTime = MinRayTime;
}

float3 ComputeDistanceFieldNormal(float3 WorldPosition, uint ObjectIndex)
{
	float4x4 WorldToVolume = LoadObjectWorldToVolume(ObjectIndex);
	float4 UVScaleAndVolumeScale = LoadObjectUVScale(ObjectIndex);
	float3 UVAdd = LoadObjectUVAddAndSelfShadowBias(ObjectIndex).xyz;
	float2 DistanceFieldMAD = LoadObjectDistanceFieldMAD(ObjectIndex);

	float3x3 VolumeToWorld = LoadObjectVolumeToWorld(ObjectIndex);

	float3 LocalPositionExtent = LoadObjectLocalPositionExtent(ObjectIndex);

	float3 VolumeShadingPosition = mul(float4(WorldPosition, 1), WorldToVolume).xyz;
	float3 ClampedSamplePosition = clamp(VolumeShadingPosition, -LocalPositionExtent, LocalPositionExtent);
	float3 LocalShadingUV = DistanceFieldVolumePositionToUV(ClampedSamplePosition, UVScaleAndVolumeScale.xyz, UVAdd);

	// Used to clamp UVs inside valid space of this object's distance field
	float3 UVMin = DistanceFieldVolumePositionToUV(-LocalPositionExtent, UVScaleAndVolumeScale.xyz, UVAdd);
	float3 UVMax = DistanceFieldVolumePositionToUV(LocalPositionExtent, UVScaleAndVolumeScale.xyz, UVAdd);

	float R = SampleMeshDistanceField(float3(min(LocalShadingUV.x + DistanceFieldAtlasTexelSize.x, UVMax.x), LocalShadingUV.y, LocalShadingUV.z), DistanceFieldMAD).x;
	float L = SampleMeshDistanceField(float3(max(LocalShadingUV.x - DistanceFieldAtlasTexelSize.x, UVMin.x), LocalShadingUV.y, LocalShadingUV.z), DistanceFieldMAD).x;
	float F = SampleMeshDistanceField(float3(LocalShadingUV.x, min(LocalShadingUV.y + DistanceFieldAtlasTexelSize.y, UVMax.y), LocalShadingUV.z), DistanceFieldMAD).x;
	float B = SampleMeshDistanceField(float3(LocalShadingUV.x, max(LocalShadingUV.y - DistanceFieldAtlasTexelSize.y, UVMin.y), LocalShadingUV.z), DistanceFieldMAD).x;
	float U = SampleMeshDistanceField(float3(LocalShadingUV.x, LocalShadingUV.y, min(LocalShadingUV.z + DistanceFieldAtlasTexelSize.z, UVMax.z)), DistanceFieldMAD).x;
	float D = SampleMeshDistanceField(float3(LocalShadingUV.x, LocalShadingUV.y, max(LocalShadingUV.z - DistanceFieldAtlasTexelSize.z, UVMin.z)), DistanceFieldMAD).x;

	float3 Gradient = .5f * float3(R - L, F - B, U - D);

	if (dot(Gradient, Gradient) == 0)
	{
		Gradient = float3(0, 0, 1);
	}

	float3 LocalNormal = normalize(Gradient);
	float3 WorldNormal = mul(LocalNormal, VolumeToWorld);
	return normalize(WorldNormal);
}

/** From light source, into world. */
uniform float4 LightDirectionAndTraceDistance;
uniform float4 LightColor;
uniform float4x4 ShadowToWorld;
uniform float2 InvPlacementGridSize;
uniform float VPLPlacementCameraRadius;

// In float4's, must match C++
//RWBuffer<uint> RWVPLParameterBuffer;
//RWBuffer<float4> RWVPLData;

uniform iimageBuffer RWVPLParameterBuffer;
uniform imageBuffer RWVPLData;

/*[numthreads(THREADGROUP_SIZEX, THREADGROUP_SIZEY, 1)]
void VPLPlacementCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
    uint3 GroupThreadId : SV_GroupThreadID)*/
layout(local_size_x = THREADGROUP_SIZEX, THREADGROUP_SIZEY = 1, local_size_z = 1) in;
void main()
{
    uint3 GroupId = gl_WorkGroupID;
    uint3 DispatchThreadId = gl_GlobalInvocationID;
    uint3 GroupThreadId = gl_LocalInvocationID;

	{
		// Distance for directional lights to trace
		float TraceDistance = LightDirectionAndTraceDistance.w;
		float3 LightDirection = LightDirectionAndTraceDistance.xyz;
		uint2 ChildCoordinate = DispatchThreadId.xy;

		if (all(ChildCoordinate * InvPlacementGridSize < 1))
		{
			float2 NormalizedCellPosition = ChildCoordinate * InvPlacementGridSize * 2 - 1;
			float3 CellStartWorldPosition = mul(float4(NormalizedCellPosition.x, NormalizedCellPosition.y, 0, 1), ShadowToWorld).xyz;

			uint NumIntersectingObjects = GetCulledNumObjects();
			uint CulledDataStart = 0;

		#if USE_SHADOW_CULLING_FOR_VPL_PLACEMENT

			GetShadowTileCulledData(CellStartWorldPosition, CulledDataStart, NumIntersectingObjects);

		#endif

			float MinRayTime = 0;
			float MinRayVisibility = 1;
			uint ObjectIndex = 0;
			RayTraceThroughLightTileCulledObjectsFirstHit(CellStartWorldPosition, LightDirection, TraceDistance, NumIntersectingObjects, CulledDataStart, MinRayTime, MinRayVisibility, ObjectIndex);

			if (MinRayVisibility < 1)
			{
				float3 IntersectionPosition = CellStartWorldPosition + LightDirection * MinRayTime;
				float3 IntersectionNormal = ComputeDistanceFieldNormal(IntersectionPosition, ObjectIndex);

				uint VPLArrayStartIndex;
				InterlockedAdd(RWVPLParameterBuffer[1], 1U, VPLArrayStartIndex);

				float3 DiffuseColor = .5f;
				float CellExtent = VPLPlacementCameraRadius * InvPlacementGridSize.x;
				float CellRadius = sqrt(2.0) * CellExtent;

				float3 Flux = DiffuseColor * LightColor.rgb * max(dot(IntersectionNormal, -LightDirection), 0) * PI * CellRadius * CellRadius;

				uint VPLBaseIndex = (VPLArrayStartIndex + 0) * VPL_DATA_STRIDE;
				RWVPLData[VPLBaseIndex + 0] = float4(IntersectionPosition, CellRadius);
				RWVPLData[VPLBaseIndex + 1] = float4(IntersectionNormal, 0);
				RWVPLData[VPLBaseIndex + 2] = float4(Flux, 0);
			}
		}
	}
}