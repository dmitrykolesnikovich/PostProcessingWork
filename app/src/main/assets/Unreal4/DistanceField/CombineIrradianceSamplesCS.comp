// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	GlobalDistanceField.usf
=============================================================================*/

//#include "Common.ush"
//#include "DeferredShadingCommon.ush"
#include "DistanceFieldLightingShared.glsl"
#include "DistanceFieldAOShared.glsl"
#include "GlobalDistanceFieldShared.glsl"
//#include "HeightfieldLightingShared.ush"

RWBuffer<float4> RWIrradianceCacheIrradiance;
Buffer<float4> SurfelIrradiance;
Buffer<float4> HeightfieldIrradiance;

layout(binding = 0, rgba16f) uniform imageBuffer RWIrradianceCacheIrradiance;
layout(binding = 0) uniform samplerBuffer SurfelIrradiance;
layout(binding = 1) uniform samplerBuffer HeightfieldIrradiance;

/**  */
/*[numthreads(FINAL_GATHER_THREADGROUP_SIZE, 1, 1)]
void CombineIrradianceSamplesCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
    uint3 GroupThreadId : SV_GroupThreadID)*/
COMP_SIZE(FINAL_GATHER_THREADGROUP_SIZE, 1, 1);
void main()
{
    uint3 GroupId = gl_WorkGroupID;
    uint3 DispatchThreadId = gl_GlobalInvocationID;
    uint3 GroupThreadId = gl_LocalInvocationID;

	uint StartIndex = SavedStartIndex[0];
	uint NumRecords = ScatterDrawParameters[1];

	uint RecordIndex = StartIndex + DispatchThreadId.x;
	uint RelativeRecordIndex = DispatchThreadId.x;

	if (RecordIndex < NumRecords)
	{
		RWIrradianceCacheIrradiance[RecordIndex] = SurfelIrradiance[RelativeRecordIndex] + HeightfieldIrradiance[RelativeRecordIndex];
	}
}