// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	GlobalDistanceField.usf
=============================================================================*/

//#include "Common.ush"
//#include "DeferredShadingCommon.ush"
#include "DistanceFieldLightingShared.glsl"
#include "DistanceFieldAOShared.glsl"
#include "GlobalDistanceFieldShared.glsl"
//#include "HeightfieldLightingShared.ush"

uniform uint3 UpdateRegionSize;
layout(binding = 0) uniform usamplerBuffer CullGridObjectNum;
layout(binding = 1) uniform usamplerBuffer CullGridObjectArray;
layout(binding = 2) uniform sampler3D ParentGlobalDistanceFieldTexture;
layout(binding = 0, r16f) uniform image3D RWGlobalDistanceFieldTexture;

#ifndef COMPOSITE_THREADGROUP_SIZEX
#define COMPOSITE_THREADGROUP_SIZEX 1
#endif

#ifndef COMPOSITE_THREADGROUP_SIZEY
#define COMPOSITE_THREADGROUP_SIZEY 1
#endif

#ifndef COMPOSITE_THREADGROUP_SIZEZ
#define COMPOSITE_THREADGROUP_SIZEZ 1
#endif

#define COMPOSITE_THREADGORUP_TOTALSIZE (COMPOSITE_THREADGROUP_SIZEX * COMPOSITE_THREADGROUP_SIZEY * COMPOSITE_THREADGROUP_SIZEZ)

#define MAX_CULLED_DF_OBJECTS 512
groupshared uint SharedCulledObjectList[MAX_CULLED_DF_OBJECTS];
groupshared uint NumTileCulledObjects;

#define USE_CULL_GRID 1


/*[numthreads(COMPOSITE_THREADGROUP_SIZEX, COMPOSITE_THREADGROUP_SIZEY, COMPOSITE_THREADGROUP_SIZEZ)]
void CompositeObjectDistanceFieldsCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
    uint3 GroupThreadId : SV_GroupThreadID)*/
layout(local_size_x = COMPOSITE_THREADGROUP_SIZEX, local_size_y = COMPOSITE_THREADGROUP_SIZEY, local_size_z = COMPOSITE_THREADGROUP_SIZEZ) in;
void main()
{
    uint3 GroupId = gl_WorkGroupID;
    uint3 DispatchThreadId = gl_GlobalInvocationID;
    uint3 GroupThreadId = gl_LocalInvocationID;

	uint NumCulledObjects = GetCulledNumObjects();
	float GlobalVolumeExtent = GlobalVolumeCenterAndExtent[ClipmapIndex].w;

#define USE_OBJECT_COMPOSITING_TILE_CULLING 1
#if USE_OBJECT_COMPOSITING_TILE_CULLING
	if (all(GroupThreadId == 0))
	{
		NumTileCulledObjects = 0;
	}

	GroupMemoryBarrierWithGroupSync();

	uint ThreadIndex = (GroupThreadId.z * COMPOSITE_THREADGROUP_SIZEY + GroupThreadId.y) * COMPOSITE_THREADGROUP_SIZEX + GroupThreadId.x;

	float3 GroupSize = float3(COMPOSITE_THREADGROUP_SIZEX, COMPOSITE_THREADGROUP_SIZEY, COMPOSITE_THREADGROUP_SIZEZ);
	float3 TileBoxExtent = .5f * GroupSize * VolumeTexelSize * GlobalVolumeExtent * 2;
	float3 TileBoxCenter = UpdateRegionVolumeMin + ((GroupId.xyz + .5f) * GroupSize + .5f) * VolumeTexelSize * GlobalVolumeExtent * 2;

#if USE_CULL_GRID
	uint CullTileIndex = ComputeCullTileIndex(DispatchThreadId / CULL_GRID_TILE_SIZE);
	uint NumGridCulledObjects = min(CullGridObjectNum[CullTileIndex], uint(MAX_GRID_CULLED_DF_OBJECTS));
	NumCulledObjects = NumGridCulledObjects;
#endif

	for (uint ListObjectIndex = ThreadIndex; ListObjectIndex < NumCulledObjects; ListObjectIndex += COMPOSITE_THREADGORUP_TOTALSIZE)
	{
		#if USE_CULL_GRID
		uint ObjectIndex = CullGridObjectArray[CullTileIndex * MAX_GRID_CULLED_DF_OBJECTS + ListObjectIndex];
		#else
			uint ObjectIndex = ListObjectIndex;
		#endif

		float4 ObjectPositionAndRadius = LoadObjectPositionAndRadius(ObjectIndex);
		//float BoxDistance = ComputeDistanceFromBoxToPoint(TileBoxCenter - TileBoxExtent, TileBoxCenter + TileBoxExtent, ObjectPositionAndRadius.xyz);

		// ComputeSquaredDistanceFromBoxToPoint is correct but adds a lot to the final cost
		float BoxDistanceSq = ComputeSquaredDistanceFromBoxToPoint(TileBoxCenter, TileBoxExtent, ObjectPositionAndRadius.xyz);
		float CombinedDistance = ObjectPositionAndRadius.w + AOGlobalMaxSphereQueryRadius;

		if (BoxDistanceSq < CombinedDistance * CombinedDistance)
		{
			uint DestIndex;
			InterlockedAdd(NumTileCulledObjects, 1U, DestIndex);
			SharedCulledObjectList[DestIndex] = ObjectIndex;
		}
	}

	GroupMemoryBarrierWithGroupSync();

	NumCulledObjects = min(NumTileCulledObjects, (uint)MAX_CULLED_DF_OBJECTS);

#endif

	float3 WorldPosition = UpdateRegionVolumeMin + (DispatchThreadId.xyz + .5f) * VolumeTexelSize * GlobalVolumeExtent * 2;
	float3 GlobalUV = ComputeGlobalUV(WorldPosition, ClipmapIndex);
	uint3 IntCoordinate = (uint3)(frac(GlobalUV) * GlobalVolumeDimension);

	float MinDistance = AOGlobalMaxSphereQueryRadius;

#if USE_PARENT_DISTANCE_FIELD
	MinDistance = ParentGlobalDistanceFieldTexture[IntCoordinate].r;
#endif

	LOOP
	for (uint ListObjectIndex = 0; ListObjectIndex < NumCulledObjects; ListObjectIndex++)
	{
		#if USE_OBJECT_COMPOSITING_TILE_CULLING
			uint ObjectIndex = SharedCulledObjectList[ListObjectIndex];
		#else
			uint ObjectIndex = ListObjectIndex;
		#endif

		float3 LocalPositionExtent = LoadObjectLocalPositionExtent(ObjectIndex);
		float4x4 WorldToVolume = LoadObjectWorldToVolume(ObjectIndex);
		bool bGeneratedAsTwoSided;
		float4 UVScaleAndVolumeScale = LoadObjectUVScale(ObjectIndex, bGeneratedAsTwoSided);
		float3 VolumePosition = mul(float4(WorldPosition, 1), WorldToVolume).xyz;
		float BoxDistance = ComputeDistanceFromBoxToPoint(-LocalPositionExtent, LocalPositionExtent, VolumePosition) * UVScaleAndVolumeScale.w;

		BRANCH
		if (BoxDistance < AOGlobalMaxSphereQueryRadius)
		{
			float3 UVAdd = LoadObjectUVAddAndSelfShadowBias(ObjectIndex).xyz;
			float2 DistanceFieldMAD = LoadObjectDistanceFieldMAD(ObjectIndex);

			float3 ClampedSamplePosition = clamp(VolumePosition, -LocalPositionExtent, LocalPositionExtent);
			float DistanceToClamped = length(VolumePosition - ClampedSamplePosition);

			float3 StepVolumeUV = DistanceFieldVolumePositionToUV(ClampedSamplePosition, UVScaleAndVolumeScale.xyz, UVAdd);
			float DistanceToOccluder = (SampleMeshDistanceField(StepVolumeUV, DistanceFieldMAD).x + DistanceToClamped) * UVScaleAndVolumeScale.w;

			MinDistance = min(MinDistance, DistanceToOccluder);
		}
	}

	if (all(DispatchThreadId.xyz < UpdateRegionSize))
	{
		RWGlobalDistanceFieldTexture[IntCoordinate] = MinDistance;
	}
}