#include "AMD_GeometryFX_Filtering.glsl"

float3 LoadVertex (uint index, uint vertexOffset)
{
//    return asfloat(vertexData.Load3(vertexOffset + index * 12));
    int x = int(vertexOffset + index * 12)/12;
    int y = x+1;
    int z = x+2;

    return float3(vertexData[x], vertexData[y], vertexData[z]);
}

bool CullTriangle (uint indices [3], float4 vertices [3])
{
    bool cull = false;

#ifdef ENABLE_CULL_INDEX
    if (bool(cullFlags & CULL_INDEX_FILTER))
    {
        if (   indices[0] == indices[1]
            || indices[1] == indices[2]
            || indices[0] == indices[2])
        {
            cull = true;
        }
    }
#endif

    // Culling in homogenous coordinates
    // Read: "Triangle Scan Conversion using 2D Homogeneous Coordinates"
    //       by Marc Olano, Trey Greer
    //       http://www.cs.unc.edu/~olano/papers/2dh-tri/2dh-tri.pdf
    float3x3 m =
    {
        vertices[0].xyw, vertices[1].xyw, vertices[2].xyw
    };

#if ENABLE_CULL_BACKFACE
    if (bool(cullFlags & CULL_BACKFACE))
    {
        cull = cull || (determinant (m) > 0);
    }
#endif

#if ENABLE_CULL_FRUSTUM || ENABLE_CULL_SMALL_PRIMITIVES
    int verticesInFrontOfNearPlane = 0;

    // Transform vertices[i].xy into normalized 0..1 screen space
    for (int i = 0; i < 3; ++i)
    {
        vertices[i].xy /= vertices[i].w;
        vertices[i].xy /= 2;
        vertices[i].xy += float2(0.5, 0.5);
        if (vertices[i].w < 0)
        {
            ++verticesInFrontOfNearPlane;
        }
    }
#endif

#if ENABLE_CULL_SMALL_PRIMITIVES
    if ((cullFlags & CULL_SMALL_PRIMITIVES) != 0)
    {
        const uint SUBPIXEL_BITS = 8;
        const uint SUBPIXEL_MASK = 0xFF;
        const uint SUBPIXEL_SAMPLES = 1 << SUBPIXEL_BITS;
        /**
        Computing this in float-point is not precise enough
        We switch to a 23.8 representation here which should match the
        HW subpixel resolution.
        We use a 8-bit wide guard-band to avoid clipping. If
        a triangle is outside the guard-band, it will be ignored.

        That is, the actual viewport supported here is 31 bit, one bit is
        unused, and the guard band is 1 << 23 bit large (8388608 pixels)
        */

        int2 minBB = int2(1 << 30, 1 << 30);
        int2 maxBB = int2(-(1 << 30), -(1 << 30));

        bool insideGuardBand = true;
        for (uint i = 0; i < 3; ++i)
        {
            float2 screenSpacePositionFP = vertices[i].xy * float2 (windowWidth, windowHeight);
            // Check if we would overflow after conversion
            if (   screenSpacePositionFP.x < -(1 << 23)
                || screenSpacePositionFP.x >  (1 << 23)
                || screenSpacePositionFP.y < -(1 << 23)
                || screenSpacePositionFP.y >  (1 << 23))
            {
                insideGuardBand = false;
            }

            int2 screenSpacePosition = int2 (screenSpacePositionFP * SUBPIXEL_SAMPLES);
            minBB = min (screenSpacePosition, minBB);
            maxBB = max (screenSpacePosition, maxBB);
        }

        if (verticesInFrontOfNearPlane == 0 && insideGuardBand)
        {
            /**
            Test is:

            Is the minimum of the bounding box right or above the sample
            point and is the width less than the pixel width in samples in
            one direction.

            This will also cull very long triangles which fall between
            multiple samples.
            */
            cull = cull
            || (
                    ((minBB.x & SUBPIXEL_MASK) > SUBPIXEL_SAMPLES/2)
                &&  ((maxBB.x - ((minBB.x & ~SUBPIXEL_MASK) + SUBPIXEL_SAMPLES/2)) < (SUBPIXEL_SAMPLES - 1)))
            || (
                    ((minBB.y & SUBPIXEL_MASK) > SUBPIXEL_SAMPLES/2)
                &&  ((maxBB.y - ((minBB.y & ~SUBPIXEL_MASK) + SUBPIXEL_SAMPLES/2)) < (SUBPIXEL_SAMPLES - 1)));
        }
    }
#endif

#if ENABLE_CULL_FRUSTUM
    if ((cullFlags & CULL_FRUSTUM) != 0)
    {
        if (verticesInFrontOfNearPlane == 3)
        {
            cull = true;
        }

        if (verticesInFrontOfNearPlane == 0)
        {
            float minx = min (min (vertices[0].x, vertices[1].x), vertices[2].x);
            float miny = min (min (vertices[0].y, vertices[1].y), vertices[2].y);
            float maxx = max (max (vertices[0].x, vertices[1].x), vertices[2].x);
            float maxy = max (max (vertices[0].y, vertices[1].y), vertices[2].y);

            cull = cull || (maxx < 0) || (maxy < 0) || (minx > 1) || (miny > 1);
        }
    }
#endif

    return cull;
}

shared uint workGroupOutputSlot;
shared uint workGroupIndexCount;

#ifndef SMALL_BATCH_SIZE
#define SMALL_BATCH_SIZE 256
#endif

//[numthreads(SMALL_BATCH_SIZE, 1, 1 )]
layout(local_size_x = SMALL_BATCH_SIZE, local_size_y = 1, local_size_z = 1)in;
/*void FilterCS(
    uint3 inGroupId : SV_GroupThreadID,
    uint3 groupId : SV_GroupID )*/
void main()
{
    uint3 inGroupId = gl_LocalInvocationID;
    uint3 groupId = gl_WorkGroupID;
    if (inGroupId.x == 0)
    {
        workGroupIndexCount = 0;
    }

    GroupMemoryBarrierWithGroupSync ();

    bool cull = true;
    uint threadOutputSlot = 0;

    uint batchMeshIndex = smallBatchData [groupId.x].meshIndex;
    uint batchInputIndexOffset = (meshConstants [batchMeshIndex].indexOffset + smallBatchData [groupId.x].indexOffset) / 4;
    uint batchInputVertexOffset = meshConstants [batchMeshIndex].vertexOffset;
    uint batchDrawIndex = smallBatchData[groupId.x].drawIndex;

    if (inGroupId.x < smallBatchData [groupId.x].faceCount)
    {
        float4x4 worldView = drawConstants [batchDrawIndex].worldView;

        uint indices [3] =
        {
            indexData [inGroupId.x * 3 + 0 + batchInputIndexOffset],
            indexData [inGroupId.x * 3 + 1 + batchInputIndexOffset],
            indexData [inGroupId.x * 3 + 2 + batchInputIndexOffset]
        };

        float4 vertices [3] =
        {
            mul (projection, mul (worldView, float4 (LoadVertex (indices [0], batchInputVertexOffset), 1))),
            mul (projection, mul (worldView, float4 (LoadVertex (indices [1], batchInputVertexOffset), 1))),
            mul (projection, mul (worldView, float4 (LoadVertex (indices [2], batchInputVertexOffset), 1)))
        };

        cull = CullTriangle (indices, vertices);

        if (!cull)
        {
//            InterlockedAdd (workGroupIndexCount, 3, threadOutputSlot);
            threadOutputSlot = atomicAdd(workGroupIndexCount, 3u);
        }
    }

    GroupMemoryBarrierWithGroupSync ();

    if (inGroupId.x == 0)
    {
//        InterlockedAdd (indirectArgs [batchDrawIndex * 5], workGroupIndexCount, workGroupOutputSlot);
        workGroupOutputSlot = atomicAdd(indirectArgs [batchDrawIndex * 5], workGroupIndexCount);
    }

//    AllMemoryBarrierWithGroupSync ();
    groupMemoryBarrier();

    uint outputIndexOffset =  workGroupOutputSlot + smallBatchData [groupId.x].outputIndexOffset / 4;

    if (!cull)
    {
        filteredIndices [outputIndexOffset + threadOutputSlot + 0] = indexData [inGroupId.x * 3 + 0 + batchInputIndexOffset];
        filteredIndices [outputIndexOffset + threadOutputSlot + 1] = indexData [inGroupId.x * 3 + 1 + batchInputIndexOffset];
        filteredIndices [outputIndexOffset + threadOutputSlot + 2] = indexData [inGroupId.x * 3 + 2 + batchInputIndexOffset];
    }

    if (inGroupId.x == 0 && groupId.x == smallBatchData [groupId.x].drawBatchStart)
    {
        indirectArgs [batchDrawIndex * 5 + 2] = smallBatchData[groupId.x].outputIndexOffset / 4; // 4 == sizeof (int32)
        indirectArgs [batchDrawIndex * 5 + 3] = batchInputVertexOffset / 12; // 12 == sizeof (float3)
        indirectArgs [batchDrawIndex * 5 + 4] = batchDrawIndex;
    }
}