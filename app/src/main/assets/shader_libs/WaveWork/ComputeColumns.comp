#include "WaveWorkCommon.glsl"
#include "ComputeCommon.comp"

layout(binding=1) buffer g_ht_input_buffer
{
    float2 g_ht_input[];
};

layout(binding=2) buffer g_dt_input_buffer
{
    float4 g_dt_input[];
};

layout(rgba16f, binding=0) uniform image2D g_displacement_output;

layout (local_size_x = MAX_FFT_RESOLUTION/2) in;
void main()
{
    uint3 dispatchThreadId= gl_GlobalInvocationID;

    uint rowIdx = dispatchThreadId.x * 2;
    uint columnIdx = dispatchThreadId.y;
    uint reverseRowIdx = reversebits(rowIdx) >> m_32_minus_log2_resolution;

    int index = int(reverseRowIdx * m_resolution + columnIdx);
    int jndex = int((m_half_resolution - reverseRowIdx) * m_resolution + columnIdx);

    float2 ht[2], dx[2], dy[2];
    if(rowIdx < m_resolution)
    {
        ht[0] = g_ht_input[index];
        ht[1] = g_ht_input[jndex];
        ht[1].y = -ht[1].y;

        float4 dti = g_dt_input[index];
        float4 dtj = g_dt_input[jndex];

        dx[0] = dti.xy;
        dx[1] = float2(dtj.x, -dtj.y);
        dy[0] = dti.zw;
        dy[1] = float2(dtj.z, -dtj.w);
    }

    fft(ht, dx, dy, dispatchThreadId.x);

    if(rowIdx < m_resolution)
    {
        float sgn = bool((dispatchThreadId.x + columnIdx) & 0x1) ? -1.0f : +1.0f;
        float scale = m_choppy_scale * sgn;

//        g_displacement_output[uint2(columnIdx, dispatchThreadId.x)] =
//            float4(dx[0].x * scale, dy[0].x * scale, ht[0].x * sgn, 0);

        imageStore(g_displacement_output, int2(columnIdx, dispatchThreadId.x), float4(dx[0].x * scale, dy[0].x * scale, ht[0].x * sgn, 0));
//        g_displacement_output[uint2(columnIdx, dispatchThreadId.x+m_half_resolution)] =
//            float4(dx[1].x * scale, dy[1].x * scale, ht[1].x * sgn, 0);

        imageStore(g_displacement_output, int2(columnIdx, dispatchThreadId.x+m_half_resolution), float4(dx[1].x * scale, dy[1].x * scale, ht[1].x * sgn, 0));
    }
}