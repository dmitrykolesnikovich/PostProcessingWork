#include "WavePackets.glsl"

in VS_INPUT_PACKET
{
    vec4 vPos;
    vec4 Att;
    vec4 Att2;
}_input[];

out PS_INPUT_PACKET
{
//	float4 oPosition	 : SV_POSITION;
	float4 pos			 /*: TEXTURE0*/;
	float4 Att			 /*: TEXTURE1*/;
	float4 Att2			 /*: TEXTURE2*/;
}_output;

layout (points) in;
layout (triangle_strip, max_vertices = 4) out;

void main()
{
    if (_input[0].vPos.x <-9000)
        return;
    _output.Att = _input[0].Att.xyzw;
    _output.Att2 = _input[0].Att2.xyzw;
    float3 cPos = float3(_input[0].vPos.x, 0, _input[0].vPos.y );	// "dangling patch" center
    float3 depth = float3(_input[0].vPos.z, 0, _input[0].vPos.w );// vector in traveling direction (orthogonal to crest direction)
    float3 width =  float3(depth.z, 0, -depth.x);				// vector along wave crest (orthogonal to travel direction)
    float dThickness = _input[0].Att.w;							// envelope size of packet (=depthspread)
    float wThickness = _input[0].Att.w;							// rectangular constant sidewidth patches (but individual thickness = envelope size)
    float3 p1 = cPos + 0.0*depth		- wThickness*width;		// neighboring packet patches overlap by 50%
    float3 p2 = cPos - dThickness*depth - wThickness*width;
    float3 p3 = cPos + 0.0*depth		+ wThickness*width;
    float3 p4 = cPos - dThickness*depth + wThickness*width;
    _output.pos = float4(-1,1, -_input[0].Att.w, 0);
    gl_Position = mul(float4(p1,1.0), g_mWorldViewProjection);
//    tStream.Append( p0 );
    EmitVertex();
    _output.pos = float4(-1,-1, -_input[0].Att.w, -_input[0].Att.w);
    gl_Position = mul(float4(p2,1.0), g_mWorldViewProjection);
//    tStream.Append( p0 );
    EmitVertex();
    _output.pos = float4(1,1, _input[0].Att.w, 0);
    gl_Position = mul(float4(p3,1.0), g_mWorldViewProjection);
//    tStream.Append( p0 );
    EmitVertex();
    _output.pos = float4(1,-1, _input[0].Att.w, -_input[0].Att.w);
    gl_Position = mul(float4(p4,1.0), g_mWorldViewProjection);
    EmitVertex();
//    tStream.Append( p0 );
//    tStream.RestartStrip();
}