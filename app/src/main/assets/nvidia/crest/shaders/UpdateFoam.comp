// Crest Ocean System

// This file is subject to the MIT License as seen in the root of this folder structure (LICENSE)

//#pragma kernel UpdateFoam

#include "OceanLODData.glsl"

uniform float _FoamFadeRate;
uniform float _WaveFoamStrength;
uniform float _WaveFoamCoverage;
uniform float _ShorelineFoamMaxDepth;
uniform float _ShorelineFoamStrength;
uniform float _SimDeltaTime;
uniform float _SimDeltaTimePrev;
uniform float _LODChange;

//RWTexture2DArray<float> _LD_TexArray_Target;
layout(binding = 0, r32f) uniform image2DArray _LD_TexArray_Target;

//[numthreads(THREAD_GROUP_SIZE_X,THREAD_GROUP_SIZE_Y,1)]
//void UpdateFoam(uint3 id : SV_DispatchThreadID)
layout (local_size_x = THREAD_GROUP_SIZE_X, local_size_y = THREAD_GROUP_SIZE_Y) in;
void main()
{
    uint3 id = SV_DispatchThreadID;
    // lod data 1 is current frame, compute world pos from quad uv
    const int sliceIndex = int(id.z);
    const int sliceIndexSource = int(id.z + _LODChange);
    float width; float height; float depth;
    {
//    _LD_TexArray_Foam_Source.GetDimensions(width, height, depth);
        int3 dim = textureSize(_LD_TexArray_Foam_Source,0);
        width = dim.x;
        height = dim.y;
        depth = dim.z;
    }
    const float2 input_uv = IDtoUV(id.xy, width, height);
    const float2 worldPosXZ = UVToWorld(input_uv, sliceIndex);
    const float3 uv_slice = float3(input_uv, id.z);

    half2 velocity = textureLod(_LD_TexArray_Flow, uv_slice, 0).xy;  // LODData_linear_clamp_sampler
    const float2 worldPosXZ_flowed = worldPosXZ - _SimDeltaTime * velocity;

    float foam = 0.0;
    const float r_max = 0.5 - _LD_Params_Source[sliceIndexSource].w;

    const float3 uv_slice_source = WorldToUV_Source(worldPosXZ_flowed, sliceIndexSource);
    half2 r = abs(uv_slice_source.xy - 0.5);

    if (sliceIndexSource < 0 || sliceIndexSource >= depth)
    {
        // Leave foam at 0 if going off the array
    }
    else if (max(r.x, r.y) <= r_max)
    {
        foam = textureLod(_LD_TexArray_Foam_Source, uv_slice_source, 0).x;  //LODData_linear_clamp_sampler
    }
    else if (sliceIndexSource + 1.0 < depth)
    {
        // Try again from larger cascade
        float3 uv_slice_source_nextlod = WorldToUV_Source(worldPosXZ_flowed, sliceIndexSource + 1);
        half2 r2 = abs(uv_slice_source_nextlod.xy - 0.5);
        if (max(r2.x, r2.y) <= r_max)
        {
            foam = textureLod(_LD_TexArray_Foam_Source, uv_slice_source_nextlod, 0.0).x;  //LODData_linear_clamp_sampler
        }
    }

    // fade
    foam *= max(0.0, 1.0 - _FoamFadeRate * _SimDeltaTime);

    // sample displacement texture and generate foam from it
    const float3 dd = float3(_LD_Params[sliceIndex].w, 0.0, _LD_Params[sliceIndex].x);
    float3 s = SampleLod(_LD_TexArray_AnimatedWaves, uv_slice).xyz;
    float3 sx = SampleLodLevel(_LD_TexArray_AnimatedWaves, uv_slice + float3(dd.xy, 0), dd.y).xyz;
    float3 sz = SampleLodLevel(_LD_TexArray_AnimatedWaves, uv_slice + float3(dd.yx, 0), dd.y).xyz;
    float3 disp = s.xyz;
    float3 disp_x = dd.zyy + sx.xyz;
    float3 disp_z = dd.yyz + sz.xyz;
    // The determinant of the displacement Jacobian is a good measure for turbulence:
    // > 1: Stretch
    // < 1: Squash
    // < 0: Overlap
    float4 du = float4(disp_x.xz, disp_z.xz) - disp.xzxz;
    float det = (du.x * du.w - du.y * du.z) / (_LD_Params[sliceIndex].x * _LD_Params[sliceIndex].x);
    foam += 5.0 * _SimDeltaTime * _WaveFoamStrength * saturate(_WaveFoamCoverage - det);

    // add foam in shallow water. use the displaced position to ensure we add foam where world objects are.
    float3 uv_slice_displaced = WorldToUV(worldPosXZ + disp.xz, sliceIndex);
    float signedOceanDepth = SampleLodLevel(_LD_TexArray_SeaFloorDepth, uv_slice_displaced, 1).x + disp.y;
    foam += _ShorelineFoamStrength * _SimDeltaTime * saturate(1.0 - signedOceanDepth / _ShorelineFoamMaxDepth);

//    _LD_TexArray_Target[id] = foam;
    imageStore(_LD_TexArray_Target, int3(id), float4(foam));
}
